{"version":3,"sources":["breadcrumb.js","dashboard.js","product.js"],"names":[],"mappings":"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","file":"all.js","sourcesContent":["var Breadcrumb = React.createClass({\n  getInitialState() {\n    return {\n      fragment  : '',\n      route     : 'Dashboard'\n    };\n  },\n  componentDidMount() {\n    this.props.router.on(\"route\", this.onRoute);\n  },\n  componentDidUpdate() {\n    //this.props.router.off(\"route\");\n  },\n  onRoute : function(route, params)\n  {\n    var fragment = Backbone.history.getFragment();\n    this.setState({\n      fragment  : fragment,\n      route     : route,\n      params    : params\n    })\n  },\n  render: function() {\n    var arrFragments = [];\n    if( this.state.fragment ){\n      arrFragments = this.state.fragment.split('/');\n    }\n    var href = '';\n    return (\n      <div className=\"ui breadcrumb\">\n        <a className=\"section\" href=\"#\">{Lang.get('common.dashboard')}</a>\n        {arrFragments.map(function(fragment, i){\n          {href += (href?'/':'') + fragment}\n          return [\n            <div className=\"divider\"> / </div>,\n            <a className=\"active section\" href={\"#\"+href}>{Lang.get('common.'+fragment)}</a>\n          ]\n        })}\n      </div>\n    );\n  }\n});","var Dashboard = React.createClass({\n    getInitialState() {\n        return {\n            value: null\n        };\n    },\n\n    componentDidMount() {\n      $('.ui.selection.dropdown').dropdown({\n        dataType: 'jsonp',\n        apiSettings   : {\n          onResponse: function(githubResponse) {\n            var\n              response = {\n                results : []\n              }\n            ;\n            // translate github api response to work with dropdown\n            $.each(githubResponse.items, function(index, item) {\n              response.results.push({\n                name: item.name,\n                value: item.id\n              });\n            });\n            return response;\n          },\n          url: '//api.github.com/search/repositories?q={query}'\n        },\n        onChange: (value) => {\n          this.setState({\n              value\n          });\n        }\n      });\n    },\n\n    componentDidUpdate() {\n        $('.ui.dropdown').dropdown('refresh');\n    },\n\n    render: function() {\n        return (\n            <div>\n                <div>\n                    <h2>Dashboard page</h2>\n                </div>\n            </div>\n        );\n    }\n});","var Product   = React.createClass({\n  getInitialState() {\n    return {\n        value: null\n    };\n  },\n\n  componentDidMount() {\n    \n  },\n\n  handleSubmit : function(e){\n    e.preventDefault();\n    var fd = new FormData();    \n    fd.append('file', this.refs.file.getDOMNode().files[0]);\n\n    $.ajax({\n      url : '/product',\n      data: fd,\n      processData: false,\n      contentType: false,\n      type: 'POST',\n      success: function(data){\n        alert(data);\n      }\n    });\n  },\n\n  componentDidUpdate() {\n  },\n\n  render: function() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <h2 className=\"ui header\">\n          <img className=\"ui image\" src=\"/image/school.png\" />\n          <div className=\"content\">\n            { Lang.get('product.add') }\n          </div>\n        </h2>\n        <div className=\"ui form\">\n          <div className=\"field\">\n            <label>{ Lang.get('product.name') }</label>\n            <input placeholder={Lang.get('product.name')} type=\"text\" />\n          </div>\n          <div className=\"two fields\">\n            <div className=\"field\">\n              <label>{ Lang.get('product.sku') }</label>\n              <input placeholder={Lang.get('product.sku')} type=\"text\" />\n            </div>\n            <div className=\"field\">\n              <label>{ Lang.get('product.series') }</label>\n              <input placeholder={Lang.get('product.series')} type=\"text\" />\n            </div>\n          </div>\n          <div className=\"two fields\">\n            <div className=\"field\">\n              <label>{ Lang.get('product.brand') }</label>\n              <input placeholder={Lang.get('product.brand')} type=\"text\" />\n            </div>\n            <div className=\"field\">\n              <label>{ Lang.get('product.unit') }</label>\n              <input placeholder={Lang.get('product.unit')} type=\"text\" />\n            </div>\n          </div>\n          <div className=\"two fields\">\n            <div className=\"field\">\n              <label>{ Lang.get('product.image') }</label>\n              <input ref=\"file\" placeholder={Lang.get('product.image')} type=\"file\" />\n            </div>\n            <div className=\"field\">\n              <label>{ Lang.get('product.description') }</label>\n              <textarea placeholder={Lang.get('product.description')}></textarea>\n            </div>\n          </div>\n          <div className=\"ui submit button\">Submit</div>\n        </div>\n      </form>\n    );\n  }\n});"],"sourceRoot":"/source/"}